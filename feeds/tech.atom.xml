<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>INSIGHT - TECH</title><link href="https://3v3ryone.github.io/" rel="alternate"></link><link href="https://3v3ryone.github.io/feeds/tech.atom.xml" rel="self"></link><id>https://3v3ryone.github.io/</id><updated>2021-03-05T00:00:00+05:30</updated><subtitle>Blog</subtitle><entry><title>Installing WINE in Linux</title><link href="https://3v3ryone.github.io/installing-wine-in-linux.html" rel="alternate"></link><published>2021-03-05T00:00:00+05:30</published><updated>2021-03-05T00:00:00+05:30</updated><author><name>Beleswar</name></author><id>tag:3v3ryone.github.io,2021-03-05:/installing-wine-in-linux.html</id><summary type="html">&lt;p&gt;Installing WINE and successively LTspice in Linux&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Wine&lt;/strong&gt; is a package that lets you run Windows applications in Linux. So you can use it to run various Windows-only programs in Linux! You can follow the below method to install wine (Arch/Debian) and skip the third step if you dont need LTspice.  &lt;/p&gt;
&lt;p&gt;So the other day, our teacher asked us to install LTspice in our systems. LTspice is an open source software used to build circuits and study their outputs. First of all, LTspice was only available for Windows and Mac and there were no official links for even the debian distro. :\ I am on Arch and I was lucky enough to find the AUR for LTspice but simply installing it didn't work. It really gave messy outputs regarding from where do you want to install &lt;strong&gt;&lt;em&gt;wine&lt;/em&gt;&lt;/strong&gt; and a thousand more stuffs.  &lt;/p&gt;
&lt;p&gt;And after coming to Linux, there was no way I would go to Windows just for LTspice. So after an intensive search, I got to know that it was actually &lt;strong&gt;WINE&lt;/strong&gt; which did all the work. &lt;strong&gt;Wine is a package that enables your computer to run Windows applications&lt;/strong&gt;. So the idea was to &lt;strong&gt;use Wine to run LTspice's windows version in Linux&lt;/strong&gt;. And installing wine was what was the root of the entire problem (A simple &lt;strong&gt;&lt;em&gt;sudo pacman -S wine&lt;/em&gt; wont&lt;/strong&gt; give you the result). Basically for wine, you need to enable to use 32 bit libraries in your 64 bit processor. So we go in this way:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable 32 bit libraries -&amp;gt; Install wine -&amp;gt; Install LTspice&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;For Ubuntu users, I have attached a link for this entire process from a blog. &lt;a href="https://www.pcsuggest.com/install-ltspice-linux/"&gt;Link to follow-Ubuntu&lt;/a&gt;&lt;br&gt;
Arch users may continue below.  &lt;/p&gt;
&lt;h2&gt;Enable 32 bit libraries&lt;/h2&gt;
&lt;p&gt;So the &lt;strong&gt;multilib&lt;/strong&gt; repository is generally used to run 32-bit applications on a 64-bit system. To enable it, go to terminal and type&lt;br&gt;
&lt;strong&gt;&lt;em&gt;sudo vim /etc/pacman.conf&lt;/em&gt;&lt;/strong&gt; (if you use nano, do &lt;strong&gt;&lt;em&gt;nano /etc/pacman.conf&lt;/em&gt;&lt;/strong&gt; )&lt;br&gt;
Go to the &lt;strong&gt;multilib&lt;/strong&gt; section and uncomment the lines 92 and 93 (multilib and Include = ...) and then save the file and exit. In vim, type &lt;strong&gt;&lt;em&gt;Esc -&amp;gt; :wq! -&amp;gt; Enter&lt;/em&gt;&lt;/strong&gt; to save and exit. In nano, do &lt;strong&gt;&lt;em&gt;Ctrl + O then Ctrl + X&lt;/em&gt;&lt;/strong&gt; to save and exit.&lt;br&gt;
&lt;img alt="image" src="https://drive.google.com/uc?export=view&amp;amp;id=1SL_0Li4Y6zlCQ_7Af6X47XX1rVbyt4VE"&gt;  &lt;/p&gt;
&lt;p&gt;Now, this enables our multilib package. Let's download the database files for &lt;em&gt;multilib&lt;/em&gt; by&lt;br&gt;
&lt;strong&gt;&lt;em&gt;sudo pacman -Sy&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;And, we are done with this section!  &lt;/p&gt;
&lt;h2&gt;Installing WINE&lt;/h2&gt;
&lt;p&gt;The rest of things is pretty simple.&lt;br&gt;
For Arch guys, We just do&lt;br&gt;
&lt;strong&gt;&lt;em&gt;sudo pacman -S wine&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
to install wine.  &lt;/p&gt;
&lt;p&gt;And done!  &lt;/p&gt;
&lt;h2&gt;Installing LTspice&lt;/h2&gt;
&lt;p&gt;Use your AUR installer to download the ltspice package. I am using yay, so it is&lt;br&gt;
&lt;strong&gt;&lt;em&gt;yay -S ltspice&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This is going to take some time. So sit back and enter your sudo password if asked during the installation.&lt;br&gt;
Then you can open LTspice, and if it asks to install wine-mono, you can do it there itself on the window! (Windows vibes:-)) else no worries.  &lt;/p&gt;
&lt;p&gt;And finally done!! Phew, :)&lt;/p&gt;</content><category term="TECH"></category><category term="LTspice"></category><category term="Wine"></category></entry><entry><title>Web Automation</title><link href="https://3v3ryone.github.io/web-automation.html" rel="alternate"></link><published>2021-02-28T00:00:00+05:30</published><updated>2021-02-28T00:00:00+05:30</updated><author><name>Beleswar</name></author><id>tag:3v3ryone.github.io,2021-02-28:/web-automation.html</id><summary type="html">&lt;p&gt;Writing an Automation script in python with the help of Selenium&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I participated in a hackathon organized by &lt;strong&gt;Solartis&lt;/strong&gt; in 2020. And my project was to write an Automation script that could extract the data of 51 people and fill an insurance form for each of them and download their confirmation recipts successfully.  &lt;/p&gt;
&lt;p&gt;The problem statement definition is given below.&lt;br&gt;
&lt;img alt="statement" src="https://drive.google.com/uc?export=view&amp;amp;id=164hlmMz7W2kLFqNLz1RHn4Yo8HDbXLiH"&gt;  &lt;/p&gt;
&lt;p&gt;This is the &lt;a href="https://enrollmentdemo.solartis.net/Quote.xhtml"&gt;link&lt;/a&gt; to the demo insurnace site. As you can see, it is really tedious to write the data of 51 people one by one in the site and generate the recipts. Hence, automation script is the solution for it.&lt;/p&gt;
&lt;h3&gt;Automation Scripts&lt;/h3&gt;
&lt;p&gt;What an automation program does is that it automates your work. You just have to run the script and sit back and see how fast it gets the job done. One example would be logging into facebook. You can just give your email/phone and password once in the code and you can literally login into fb under 3 seconds for the rest of your lifetime :). You now don't have to open your browser, search into facebook, type your email and password and get logged in. You just have to run the program and it does all of this for you in seconds. So, automation scripts can be used for all things that you do repeatedly in a day, like paying bills online, opening up mails, buying your cart on amazon and what not!  &lt;/p&gt;
&lt;p&gt;So coming back to the project, I created an Excel sheet containing the data of 51 people from 51 states of the USA, obviously fake. And I wrote the automation program in python and used &lt;strong&gt;selenium&lt;/strong&gt; for automation. Selenium is basically a package that enables you to do automation. The program used &lt;strong&gt;Openpyxl&lt;/strong&gt; to extract the data from the Excel sheet and use it in the site. Openpyxl is another package that enables the program to access the data from an Excel sheet based on the row and coloumn value.  &lt;/p&gt;
&lt;p&gt;I have attached the link to my github repository which contains the code and the excel sheet. Don't worry, I have also listed out the packages required for running this code in the Readme file :)&lt;br&gt;
&lt;a href="https://github.com/3V3RYONE/Solartis-Web-Automation"&gt;Github repo link&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;So the whole project can be simply thought of as an way of data transmission, with the Excel sheet being the source, the website being the destination and the automation script being the superfast transmission medium. :)&lt;/p&gt;</content><category term="TECH"></category><category term="Web Automation"></category><category term="Selenium"></category></entry></feed>